# -*- coding: utf-8 -*-
"""
Diffusion Processes and Brownian Motion
Author: Amaan
Date: April 8, 2023
Description: This project explores diffusion equations, Brownian motion, 
and particle dynamics in a river-like flow.
"""

import numpy as np
import matplotlib.pyplot as plt

# ------------------------ Part 1: Diffusion Equation ------------------------

def find_c(x, t, u):
    """
    Calculate c(x, t, u) = exp(-(x - ut)^2) / (4t * sqrt(pi * t)).
    Inputs:
        x: float or array-like, position(s).
        t: float, time.
        u: float, velocity.
    Returns:
        float or array-like, concentration value(s).
    """
    denominator = 4 * t * np.sqrt(np.pi * t)
    numerator = np.exp(-((x - u * t) ** 2))
    return numerator / denominator

# Test the function with pen-and-paper calculation
x = 1.2
t = 0.5
u = 2.0
expected_value = np.exp(-((x - u * t) ** 2)) / (4 * t * np.sqrt(np.pi * t))
result = find_c(x, t, u)
absolute_error = np.abs(result - expected_value)

if absolute_error < 1e-6:
    print("YESSS IT MATCHES THE PEN AND PAPER CALC")
else:
    print("DARN IT, TRY AGAIN")

# ------------------------ Part 2: Plotting c(x, t, u) ------------------------

# Define x-values and calculate c(x, t, u) for different t-values
x = np.linspace(-10, 10, 500)
c11 = find_c(x, 10, 1)
c22 = find_c(x, 20, 1)
c33 = find_c(x, 30, 1)

# Plot
plt.plot(x, c11, label='c(x, 10, 1)')
plt.plot(x, c22, label='c(x, 20, 1)')
plt.plot(x, c33, label='c(x, 30, 1)')
plt.xlabel('x')
plt.ylabel('c(x, t, u)')
plt.title('Plot of c(x, t, u) for Different t Values')
plt.legend()
plt.show()

# ------------------------ Part 3: 2D Storage Array ------------------------

# Create a storage array for c(x, t, u) values
x = np.linspace(-10, 10, 201)
t = np.arange(0.1, 5.1, 0.1)
A = np.zeros((len(x), len(t)))

# Populate the array
for i in range(len(x)):
    for j in range(len(t)):
        A[i, j] = find_c(x[i], t[j], 0)

# Visualize the 2D array
plt.pcolor(t, x, A)
plt.xlabel('t')
plt.ylabel('x')
plt.title('2D Storage Array for c(x, t, u)')
plt.colorbar()
plt.show()

# ------------------------ Part 4: Brownian Motion ------------------------

def realization(n):
    """
    Simulates a realization of Brownian motion.
    Inputs:
        n: int, number of steps.
    Outputs:
        x, y: array-like, positions at each step.
    """
    dx = np.random.normal(1, np.sqrt(2), n)
    dy = np.random.normal(0, np.sqrt(2), n)
    x = np.cumsum(dx)
    y = np.cumsum(dy)
    return x, y

# Simulate k realizations of Brownian motion
n = 100
k = 100000
A = np.zeros((k, n))
B = np.zeros((k, n))
for j in range(k):
    x, y = realization(n)
    A[j, :] = x
    B[j, :] = y

# Plot histograms at specific times
fig, ax = plt.subplots(figsize=(10, 7))
binsx = np.arange(0, 121, 2)
t_values = [10, 20, 30]

for t in t_values:
    idx = t - 1
    ax.hist(A[:, idx], bins=binsx, alpha=0.5, label=f't = {t}')
    c = np.sqrt(4 * 1 * t)
    ax.plot(binsx, k * c, label=f'k * c(x, {t}, 1)', lw=2)

ax.legend()
ax.set_xlabel('x')
ax.set_ylabel('Concentration')
ax.set_title('Diffusion in a River')
plt.show()

# ------------------------ Part 5: Particles in a River ------------------------

# Simulate particles moving in a river with flow and boundaries
N = 100
T = 20
dt = 0.01
sigma = 1.0
v = np.array([1.0, 0.0])
L = 10
shore = 10

x = np.zeros((N, T + 1, 2))
x[:, 0, 0] = np.random.uniform(-L / 2, L / 2, N)

for t in range(T):
    x[:, t + 1] = x[:, t] + np.sqrt(dt) * np.random.normal(0, sigma, (N, 2)) + v * dt
    hit_shore = np.where(np.abs(x[:, t + 1, 1]) > shore)[0]
    x[hit_shore, t + 1, 1] = np.sign(x[hit_shore, t + 1, 1]) * shore

# Plot particle distributions
times = [5, 10, 15]
fig, ax2 = plt.subplots(1, 3, figsize=(15, 5), sharex=True, sharey=True)

for i, t in enumerate(times):
    ax2[i].hist2d(x[:, t, 0], x[:, t, 1], bins=50, cmap='viridis')
    ax2[i].set_title(f'Time = {t * dt:.2f}s')
    ax2[i].set_xlabel('X position')
    ax2[i].set_ylabel('Y position')
    ax2[i].set_xlim([-L / 2, L / 2])
    ax2[i].set_ylim([-shore - 1, shore + 1])

plt.show()
